#!/bin/bash
[ $(uname -m) = "x86_64" ] || exit 0
nehalem_flags="mmx sse sse2 ssse3 sse4.1 sse4.2 popcnt"
sandybridge_flags="${nehalem_flags} avx aes"
haswell_flags="${sandybridge_flags} movbe avx2 fma"

#No need to overirde LD_LIBRARY_PATH if SCRAM_VECTOR is not set of set to "default"
if [ "${SCRAM_VECTOR}" = "" ] || [ "${SCRAM_VECTOR}" = "default" ] ; then exit 0 ; fi

SUPPORTED_VECTORS="$(scram tool info self | grep '^SCRAM_VECTORIZE+=' | sed 's|.*=||')"
SELECTED_VECTORS="${SCRAM_VECTOR}"
if [ "${SCRAM_VECTOR}" = "auto" ] ; then
  SELECTED_VECTORS="${SUPPORTED_VECTORS}"
elif [ $(echo ${SUPPORTED_VECTORS} | tr ' ' '\n' | grep "^${SCRAM_VECTOR}\$" | wc -l) -eq 0 ] ; then
  echo "WARNING: Vector instructions '${SCRAM_VECTOR}' not supported by project. Using default instruction set." 1>&2
  exit 0
fi
SCRAM_VECTOR=""
CPUFLAGS=$(cat /proc/cpuinfo | grep flags | tail -1 | sed 's|.*: *||')
for v in ${SELECTED_VECTORS} ; do
  flags=$(eval "echo \${${v}_flags}")
  [ "${flags}" = "" ] && continue
  OK=true
  for f in ${flags} ; do
    if [ $(echo " $CPUFLAGS " | grep " $f " | wc -l) -eq 0 ] ; then
      OK=false
      break
    fi
  done
  if $OK ; then
    SCRAM_VECTOR=$v
    break
  fi
done
if [ "${SCRAM_VECTOR}" = "" ] ; then
  echo "WARNING: Vector instructions '${SUPPORTED_VECTORS}' not available. Using default instruction set." 1>&2
  exit 0
fi

echo "IMPORTANT: Setting CMSSW environment to use '${SCRAM_VECTOR}' instructions set." 1>&2
for d in $(scram tool tag self LIBDIR) ; do
  v=""
  case $d in
    ${LOCALTOP}/* ) v=$d ;;
    * ) if [ -d $d/${SCRAM_VECTOR} ] ; then v=$d ; fi ;;
  esac
  if [ $v ] ; then
    echo "RUNTIME:path:replace:LD_LIBRARY_PATH=$d=$d/${SCRAM_VECTOR}:$d"
  fi
done
